plugins {
  id 'maven-publish'
  id 'signing'
  id "org.owasp.dependencycheck" version "8.4.2"
  id 'io.spring.dependency-management' version '1.1.4'
}

group "ee.fhir.fhirest"

allprojects {
  apply plugin: "java-library"
  apply plugin: "org.owasp.dependencycheck"
  apply plugin: "io.spring.dependency-management"

  dependencyManagement {
    imports {
      mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
  }

  version rootProject.version
  group rootProject.group

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }

  sourceCompatibility = 17
  targetCompatibility = 17

  repositories {
    mavenCentral()
  }

  dependencies {
    annotationProcessor "org.projectlombok:lombok:1.18.30"
    compileOnly "org.projectlombok:lombok:1.18.30"

    implementation 'org.springframework:spring-context'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'jakarta.inject:jakarta.inject-api:2.0.1'
    implementation 'jakarta.annotation:jakarta.annotation-api:2.1.1'

    implementation "org.apache.commons:commons-collections4:4.4"
    implementation "org.apache.commons:commons-lang3:3.13.0"
    implementation "commons-io:commons-io:2.15.0"
  }
}

subprojects { Project project ->
  apply plugin: "maven-publish"
  apply plugin: "signing"

  java {
    withSourcesJar()
    withJavadocJar()
  }

  tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:-missing', '-quiet')
  }

  signing {
    if (System.getenv('GPG_KEY')) {
      def signingKey = System.getenv("GPG_KEY")
      def signingPassword = System.getenv("GPG_PASS")
      useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications
  }

  afterEvaluate { // afterEvaluate needed to read variable values from subproject (like project.description)
    publishing {
      publications {
        mavenJava(MavenPublication) {
          artifactId = project.name
          from components.java
          pom {
            name = project.name
            description = project.description
            url = 'https://github.com/fhirest/fhirest'
            scm {
              url = 'https://github.com/fhirest/fhirest'
              connection = "scm:git:https://github.com/fhirest/fhirest.git"
              developerConnection = "scm:git:git@github.com:fhirest/fhirest.git"
            }
            developers {
              developer {
                name = 'FhirEST Community'
              }
            }
            licenses {
              license {
                name = 'MIT'
                url = 'https://github.com/fhirest/fhirest/blob/master/LICENSE.md'
              }
            }
          }
        }
      }
      repositories {
        maven {
          url = uri("https://maven.pkg.github.com/fhirest/fhirest")
          credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
          }
        }
      }
    }
  }

}
